type: edu
custom_name: stage4
files:
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        String input;
        Clue(String input, int x, int y) {
            this.input = input;
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() {
            super(Main.class);
        }

        static final String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;

            for (String startField : new String[] {
                "_XXOO_OX_",
                "_________",
                "X_X_O____"
            }) {

                for (String input : inputs) {
                    String fullInput = iterateCells(input);

                    String[] strNums = input.split("\\s+");
                    int x = Integer.parseInt(strNums[0]);
                    int y = Integer.parseInt(strNums[1]);

                    if (i % 2 == 1) {
                        // mix with incorrect data
                        fullInput = "4 " + i + "\n" + fullInput;
                    }

                    tests.add(new TestCase<Clue>()
                        .setInput(startField + "\n" + fullInput)
                        .setAttach(new Clue(startField, x, y)));

                    i++;
                }

            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() != 2) {
                return new CheckResult(false,
                    "Can't find two fields inside output");
            }

            TicTacToeField curr = fields.get(0);
            TicTacToeField next = fields.get(1);

            TicTacToeField correctCurr = new TicTacToeField(clue.input);
            TicTacToeField correctNext = new TicTacToeField(correctCurr.field);

            String[] numInputs = iterateCells(clue.x + " " + clue.y).split("\n");
            for (String input : numInputs) {
                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);
                if (correctNext.field[y - 1][x - 1] == FieldState.FREE) {
                    correctNext.field[y - 1][x - 1] = FieldState.X;
                    break;
                }
            }

            if (!curr.equalTo(correctCurr)) {
                return new CheckResult(false,
                    "The first field is not equal to the input field");
            }

            if (!next.equalTo(correctNext)) {
                return new CheckResult(false,
                    "The first field is correct, but the second is not");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Main.java
  visible: true
  text: |-
    package tictactoe;
    import java.util.Scanner;
    public class Main {

        //List of characters used in the board
        public static final char CHARACTER_X = 'X';
        public static final char CHARACTER_O = 'O';
        public static final char CHARACTER_EMPTY = '_';
        public static final char CHARACTER_TOP_BOUNDARY = '-';
        public static final char CHARACTER_SIDE_BOUNDARY = '|';

        //Static variables to denote the board and the statistics of the board
        public static char[][] cellsMatrix = new char[3][3];
        public static int EMPTY_SPACES = 0;
        public static int COUNT_OF_X = 0;
        public static int COUNT_OF_O = 0;
        public static int COUNT_WINNINGS_X = 0;
        public static int COUNT_WINNINGS_O = 0;


        public static boolean PROCEED = false;
        //0 for incomplete, 1 for complete and win, 2 for complete and draw and -1 for impossible
        public static int GAME_STATUS;

        private static boolean isValidCharacter(char ch) {
            return ch == CHARACTER_EMPTY || ch == CHARACTER_O || ch == CHARACTER_X;
        }

        public static void printFieldBoundary() {
            for (int i = 0; i < 9; i++) {
                System.out.printf("%c", CHARACTER_TOP_BOUNDARY);
            }
            System.out.println();
        }

        public static void printBoard() {
            printFieldBoundary();
            for (char[] row : cellsMatrix) {
                System.out.printf("%c ", CHARACTER_SIDE_BOUNDARY);
                for (char element : row) {
                    System.out.printf("%c ", element);
                }
                System.out.printf("%c%n", CHARACTER_SIDE_BOUNDARY);
            }
            printFieldBoundary();
        }

        public static void updateBoardStatistics( char ch ) {
            switch( ch ) {
                case CHARACTER_EMPTY:
                    EMPTY_SPACES++;
                    break;
                case CHARACTER_O:
                    COUNT_OF_O++;
                    break;
                case CHARACTER_X:
                    COUNT_OF_X++;
                    break;
                default:

            }
        }

        public static boolean updateBoard(String cellsString) {
            char[] charArray = cellsString.toCharArray();
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    char ch = charArray[3 * i + j];
                    boolean isValidChar = isValidCharacter(ch);
                    if (isValidCharacter(ch)) {
                        cellsMatrix[i][j] = charArray[3 * i + j];
                        updateBoardStatistics(ch);
                    }
                    else {
                        System.out.println("The input string contains an invalid character " + ch);
                        return isValidChar;
                    }
                }
            }
            return true;
        }

        private static void checkWinningShots( char[][] cells, boolean rowWise ) {
            for( int i = 0; i < cells.length; i++ ) {
                char element = rowWise ? cells[i][0] : cells[0][i];
                boolean isCharConsecutive = true;
                for( int j = 1; j < cells.length; j++ ) {
                    if( (rowWise && cells[i][j] != element)  ||
                            ( !rowWise && cells[j][i] != element ) ) {
                        isCharConsecutive = false;
                        break;
                    }
                }
                if( isCharConsecutive && element == 'X' )
                    COUNT_WINNINGS_X++;
                if( isCharConsecutive && element == 'O' )
                    COUNT_WINNINGS_O++;
            }
        }

        private static void checkDiagonalWinningShots( char[][] cells, boolean moveTopToBottom ) {
            int lastIndex = cells.length-1;
            char element = moveTopToBottom ? cells[0][0] : cells[lastIndex][0];
            boolean isCharConsecutive = true;
            for( int j = 1; j < cells.length; j++ ) {
                if( (moveTopToBottom && cells[j][j] != element) || (!moveTopToBottom && cells[lastIndex-j][j] != element ) ) {
                    isCharConsecutive = false;
                    break;
                }
            }
            if( isCharConsecutive && element == 'X' )
                COUNT_WINNINGS_X++;
            if( isCharConsecutive && element == 'O' )
                COUNT_WINNINGS_O++;
        }


        public static void checkWinningShots( ) {
            checkWinningShots(cellsMatrix,true);
            checkWinningShots(cellsMatrix, false);
            checkDiagonalWinningShots(cellsMatrix, true);
            checkDiagonalWinningShots(cellsMatrix, false);
        }


        public static void analyseGameAndDisplayResult( ) {
            if( Math.abs(COUNT_OF_O-COUNT_OF_X) >= 2 ) {
                System.out.println("Impossible");
                GAME_STATUS = -1;
            }
            else {
                checkWinningShots();
                if (COUNT_WINNINGS_X == 0 && COUNT_WINNINGS_O == 0) {
                    if (EMPTY_SPACES == 0) {
                        System.out.println("Draw");
                        GAME_STATUS = 2;
                    }
                    else {
                        System.out.println("Game not finished");
                        GAME_STATUS = 1;
                    }
                } else if ((COUNT_WINNINGS_X == 1 && COUNT_WINNINGS_O == 0) ||
                        (COUNT_WINNINGS_X == 0 && COUNT_WINNINGS_O == 1)) {
                    System.out.println(COUNT_WINNINGS_X == 1 ? "X wins" : "O wins");
                    GAME_STATUS = 1;
                } else {
                    System.out.println("Impossible");
                    GAME_STATUS = -1;
                }
            }
        }


        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter cells:");
            String cells = scanner.nextLine();
            updateBoard(cells);
            printBoard();
            analyseGameAndDisplayResult();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/48/stages/258/implement
status: Solved
record: 3
